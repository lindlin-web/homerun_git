// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>

  in vec4 color;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;

    

  #endif

  vec4 frag () {
    vec4 accum = vec4(0.0);
    vec4 normal = vec4(0.0);
    vec4 o = vec4(1.0, 1.0, 1.0, 1.0);
    float radius = 0.0009;
    #if USE_TEXTURE
        normal = CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
        accum += CCSampleWithAlphaSeparated(cc_spriteTexture, vec2(uv0.x - radius, uv0.y - radius));
        accum += CCSampleWithAlphaSeparated(cc_spriteTexture, vec2(uv0.x + radius, uv0.y - radius));
        accum += CCSampleWithAlphaSeparated(cc_spriteTexture, vec2(uv0.x + radius, uv0.y + radius));
        accum += CCSampleWithAlphaSeparated(cc_spriteTexture, vec2(uv0.x - radius, uv0.y + radius));

        accum.r = 0.0 * accum.a;
        accum.g = 0.0 * accum.a;
        accum.b = 0.0 * accum.a;
        accum.a = 1.0 * accum.a;
        if(normal.a > 0.68) {
          normal.r = 1.0;
          normal.g = 1.0;
          normal.b = 1.0;
          normal.a = 1.0;
        }
        //accum * (1.0- normal.a)相当于描边图和原图重叠的地方都为透明，这样只剩下描边
        //normal 还是原图
        //accum * (1.0- normal.a) + normal 就是描边+原图了
        normal = accum * (1.0- normal.a) +normal;
    #endif

    o *= normal;
    ALPHA_TEST(o);
    return o;
  }
}%
